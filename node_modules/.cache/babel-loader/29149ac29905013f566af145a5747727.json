{"ast":null,"code":"const fetch = require('../../utils/fetch');\n\nconst _require = require('../../utils/testing/validate'),\n      validate = _require.validate;\n\nconst _require2 = require('../../utils/testing/errors/index'),\n      ConflictError = _require2.errors.ConflictError;\n/**\n * It calls the API to recover user info, if user not exists creates a new one.\n * \n * @param {string} name, user name\n * @param {string} surname, user surname\n * @param {string} email, user email\n * @param {string} username, user username\n * @param {string} password, user password \n * @param {string} gender, user gender \n */\n\n\nmodule.exports = function (name, surname, username, email, password) {\n  validate.string(name);\n  validate.string.notVoid('name', name);\n  validate.string(surname);\n  validate.string.notVoid('surname', surname);\n  validate.string(username);\n  validate.string.notVoid('username', username);\n  validate.string(email);\n  validate.string.notVoid('e-mail', email);\n  validate.email(email);\n  validate.string(password);\n  validate.string.notVoid('password', password);\n  return (async () => {\n    const res = await fetch('https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        surname,\n        username,\n        email,\n        password\n      })\n    });\n    if (res.status === 201) return;\n    if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["/Users/Adri/Documents/Projects/gnomes-axa/src/logic/register-user/index.js"],"names":["fetch","require","validate","ConflictError","errors","module","exports","name","surname","username","email","password","string","notVoid","res","method","headers","body","JSON","stringify","status","parse","message","Error"],"mappings":"AAAA,MAAMA,KAAK,GAAIC,OAAO,CAAC,mBAAD,CAAtB;;iBACqBA,OAAO,CAAC,8BAAD,C;MAApBC,Q,YAAAA,Q;;kBAC8BD,OAAO,CAAC,kCAAD,C;MAA3BE,a,aAAVC,M,CAAUD,a;AAElB;;;;;;;;;;;;AAWAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoD;AACjET,EAAAA,QAAQ,CAACU,MAAT,CAAgBL,IAAhB;AACAL,EAAAA,QAAQ,CAACU,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCN,IAAhC;AACAL,EAAAA,QAAQ,CAACU,MAAT,CAAgBJ,OAAhB;AACAN,EAAAA,QAAQ,CAACU,MAAT,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmCL,OAAnC;AACAN,EAAAA,QAAQ,CAACU,MAAT,CAAgBH,QAAhB;AACAP,EAAAA,QAAQ,CAACU,MAAT,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoCJ,QAApC;AACAP,EAAAA,QAAQ,CAACU,MAAT,CAAgBF,KAAhB;AACAR,EAAAA,QAAQ,CAACU,MAAT,CAAgBC,OAAhB,CAAwB,QAAxB,EAAkCH,KAAlC;AACAR,EAAAA,QAAQ,CAACQ,KAAT,CAAeA,KAAf;AACAR,EAAAA,QAAQ,CAACU,MAAT,CAAgBD,QAAhB;AACAT,EAAAA,QAAQ,CAACU,MAAT,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoCF,QAApC;AAEA,SAAO,CAAC,YAAY;AAChB,UAAMG,GAAG,GAAG,MAAMd,KAAK,CAAC,wEAAD,EAA2E;AAC9Fe,MAAAA,MAAM,EAAE,MADsF;AAE9FC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFqF;AAG9FC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA,QAAjB;AAA2BC,QAAAA,KAA3B;AAAkCC,QAAAA;AAAlC,OAAf;AAHwF,KAA3E,CAAvB;AAKA,QAAIG,GAAG,CAACM,MAAJ,KAAe,GAAnB,EAAwB;AAExB,QAAIN,GAAG,CAACM,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIjB,aAAJ,CAAkBe,IAAI,CAACG,KAAL,CAAWP,GAAG,CAACG,IAAf,EAAqBK,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,KAAL,CAAWP,GAAG,CAACG,IAAf,EAAqBK,OAA/B,CAAN;AACH,GAXM,GAAP;AAYH,CAzBD","sourcesContent":["const fetch  = require('../../utils/fetch')\nconst { validate } = require('../../utils/testing/validate')\nconst { errors: { ConflictError } } = require('../../utils/testing/errors/index')\n\n/**\n * It calls the API to recover user info, if user not exists creates a new one.\n * \n * @param {string} name, user name\n * @param {string} surname, user surname\n * @param {string} email, user email\n * @param {string} username, user username\n * @param {string} password, user password \n * @param {string} gender, user gender \n */\n\nmodule.exports = function (name, surname, username, email, password) {\n    validate.string(name)\n    validate.string.notVoid('name', name)\n    validate.string(surname)\n    validate.string.notVoid('surname', surname)\n    validate.string(username)\n    validate.string.notVoid('username', username)\n    validate.string(email)\n    validate.string.notVoid('e-mail', email)\n    validate.email(email)\n    validate.string(password)\n    validate.string.notVoid('password', password)\n\n    return (async () => {\n        const res = await fetch('https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ name, surname, username, email, password })\n        })\n        if (res.status === 201) return\n\n        if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message)\n\n        throw new Error(JSON.parse(res.body).message)\n    })()\n}"]},"metadata":{},"sourceType":"module"}