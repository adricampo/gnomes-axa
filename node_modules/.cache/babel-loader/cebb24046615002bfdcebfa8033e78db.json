{"ast":null,"code":"const _require = require('./errors'),\n      ContentError = _require.ContentError;\n\nconst _require2 = require('./validators'),\n      isTypeOf = _require2.isTypeOf,\n      isInstanceOf = _require2.isInstanceOf,\n      isEmail = _require2.isEmail;\n\nconst validate = {\n  typeOf(type, target) {\n    if (!isTypeOf(target, type)) throw new TypeError(`${target} is not a ${type}`);\n  },\n\n  string(target) {\n    this.typeOf('string', target);\n  },\n\n  function(target) {\n    this.typeOf('function', target);\n  },\n\n  number(target) {\n    this.typeOf('number', target);\n  },\n\n  gender(target) {\n    this.typeOf('gender', target);\n  },\n\n  level(target) {\n    this.typeOf('level', target);\n  },\n\n  date(target) {\n    this.typeOf('date', target);\n  },\n\n  time(target) {\n    this.typeOf('time', target);\n  },\n\n  boolean(target) {\n    this.typeOf('boolean', target);\n  },\n\n  team(target) {\n    this.typeOf('team', target);\n  },\n\n  instanceOf(type, target) {\n    if (!isInstanceOf(target, type)) throw TypeError(`${target} is not a ${type.name}`);\n  },\n\n  array(target) {\n    this.instanceOf(Array, target);\n  },\n\n  email(target) {\n    if (!isEmail(String(target).toLowerCase())) throw new ContentError(`${target} is not an e-mail`);\n  },\n\n  matches(name, target, ...values) {\n    if (!values.includes(target)) throw new ContentError(`${target} does not match any of the valid ${name} values: ${values}`);\n  }\n\n};\n\nvalidate.string.notVoid = function (name, target) {\n  if (!target.trim().length) throw new ContentError(`${name} is empty or blank`);\n};\n\nmodule.exports = validate;","map":{"version":3,"sources":["/Users/Adri/Documents/Projects/gnomes-axa/src/utils/testing/validate.js"],"names":["require","ContentError","isTypeOf","isInstanceOf","isEmail","validate","typeOf","type","target","TypeError","string","function","number","gender","level","date","time","boolean","team","instanceOf","name","array","Array","email","String","toLowerCase","matches","values","includes","notVoid","trim","length","module","exports"],"mappings":"iBAAyBA,OAAO,CAAC,UAAD,C;MAAxBC,Y,YAAAA,Y;;kBACoCD,OAAO,CAAC,cAAD,C;MAA3CE,Q,aAAAA,Q;MAAUC,Y,aAAAA,Y;MAAcC,O,aAAAA,O;;AAEhC,MAAMC,QAAQ,GAAG;AACbC,EAAAA,MAAM,CAACC,IAAD,EAAOC,MAAP,EAAe;AACjB,QAAI,CAACN,QAAQ,CAACM,MAAD,EAASD,IAAT,CAAb,EAA6B,MAAM,IAAIE,SAAJ,CAAe,GAAED,MAAO,aAAYD,IAAK,EAAzC,CAAN;AAChC,GAHY;;AAKbG,EAAAA,MAAM,CAACF,MAAD,EAAS;AACX,SAAKF,MAAL,CAAY,QAAZ,EAAsBE,MAAtB;AACH,GAPY;;AASbG,EAAAA,QAAQ,CAACH,MAAD,EAAS;AACb,SAAKF,MAAL,CAAY,UAAZ,EAAwBE,MAAxB;AACH,GAXY;;AAabI,EAAAA,MAAM,CAACJ,MAAD,EAAS;AACX,SAAKF,MAAL,CAAY,QAAZ,EAAsBE,MAAtB;AACH,GAfY;;AAiBbK,EAAAA,MAAM,CAACL,MAAD,EAAS;AACX,SAAKF,MAAL,CAAY,QAAZ,EAAsBE,MAAtB;AACH,GAnBY;;AAqBbM,EAAAA,KAAK,CAACN,MAAD,EAAS;AACV,SAAKF,MAAL,CAAY,OAAZ,EAAqBE,MAArB;AACH,GAvBY;;AAyBbO,EAAAA,IAAI,CAACP,MAAD,EAAS;AACT,SAAKF,MAAL,CAAY,MAAZ,EAAoBE,MAApB;AACH,GA3BY;;AA6BbQ,EAAAA,IAAI,CAACR,MAAD,EAAS;AACT,SAAKF,MAAL,CAAY,MAAZ,EAAoBE,MAApB;AACH,GA/BY;;AAiCbS,EAAAA,OAAO,CAACT,MAAD,EAAS;AACZ,SAAKF,MAAL,CAAY,SAAZ,EAAuBE,MAAvB;AACH,GAnCY;;AAqCbU,EAAAA,IAAI,CAACV,MAAD,EAAS;AACT,SAAKF,MAAL,CAAY,MAAZ,EAAoBE,MAApB;AACH,GAvCY;;AAyCbW,EAAAA,UAAU,CAACZ,IAAD,EAAOC,MAAP,EAAe;AACrB,QAAI,CAACL,YAAY,CAACK,MAAD,EAASD,IAAT,CAAjB,EAAiC,MAAME,SAAS,CAAE,GAAED,MAAO,aAAYD,IAAI,CAACa,IAAK,EAAjC,CAAf;AACpC,GA3CY;;AA6CbC,EAAAA,KAAK,CAACb,MAAD,EAAS;AACV,SAAKW,UAAL,CAAgBG,KAAhB,EAAuBd,MAAvB;AACH,GA/CY;;AAiDbe,EAAAA,KAAK,CAACf,MAAD,EAAS;AACV,QAAI,CAACJ,OAAO,CAACoB,MAAM,CAAChB,MAAD,CAAN,CAAeiB,WAAf,EAAD,CAAZ,EAA4C,MAAM,IAAIxB,YAAJ,CAAkB,GAAEO,MAAO,mBAA3B,CAAN;AAC/C,GAnDY;;AAqDbkB,EAAAA,OAAO,CAACN,IAAD,EAAOZ,MAAP,EAAe,GAAGmB,MAAlB,EAA0B;AAC7B,QAAI,CAACA,MAAM,CAACC,QAAP,CAAgBpB,MAAhB,CAAL,EAA8B,MAAM,IAAIP,YAAJ,CAAkB,GAAEO,MAAO,oCAAmCY,IAAK,YAAWO,MAAO,EAArF,CAAN;AACjC;;AAvDY,CAAjB;;AA0DAtB,QAAQ,CAACK,MAAT,CAAgBmB,OAAhB,GAA0B,UAAUT,IAAV,EAAgBZ,MAAhB,EAAwB;AAC9C,MAAI,CAACA,MAAM,CAACsB,IAAP,GAAcC,MAAnB,EAA2B,MAAM,IAAI9B,YAAJ,CAAkB,GAAEmB,IAAK,oBAAzB,CAAN;AAC9B,CAFD;;AAIAY,MAAM,CAACC,OAAP,GAAiB5B,QAAjB","sourcesContent":["const { ContentError } = require('./errors')\nconst { isTypeOf, isInstanceOf, isEmail } = require('./validators')\n\nconst validate = {\n    typeOf(type, target) {\n        if (!isTypeOf(target, type)) throw new TypeError(`${target} is not a ${type}`)\n    },\n\n    string(target) {\n        this.typeOf('string', target)\n    },\n\n    function(target) {\n        this.typeOf('function', target)\n    },\n\n    number(target) {\n        this.typeOf('number', target)\n    },\n \n    gender(target) {\n        this.typeOf('gender', target)\n    },\n\n    level(target) {\n        this.typeOf('level', target)\n    },\n\n    date(target) {\n        this.typeOf('date', target)\n    },\n\n    time(target) {\n        this.typeOf('time', target)\n    },\n\n    boolean(target) {\n        this.typeOf('boolean', target)\n    },\n\n    team(target) {\n        this.typeOf('team', target)\n    },\n\n    instanceOf(type, target) {\n        if (!isInstanceOf(target, type)) throw TypeError(`${target} is not a ${type.name}`)\n    },\n\n    array(target) {\n        this.instanceOf(Array, target)\n    },\n\n    email(target) {\n        if (!isEmail(String(target).toLowerCase())) throw new ContentError(`${target} is not an e-mail`)\n    },\n\n    matches(name, target, ...values) {\n        if (!values.includes(target)) throw new ContentError(`${target} does not match any of the valid ${name} values: ${values}`)   \n    }\n}\n\nvalidate.string.notVoid = function (name, target) {\n    if (!target.trim().length) throw new ContentError(`${name} is empty or blank`)\n}\n\nmodule.exports = validate"]},"metadata":{},"sourceType":"module"}